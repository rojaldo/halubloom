# coding: utf-8

"""
    Halu API

    This should be a basic guide for the new Halu API. It will be updated as soon as I add new messages (or i'll try). The IP address to communicate with the master lamp is 10.0.0.1 by default.

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Lamp(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, available=None, bssid=None, button_enabled=None, current_color=None, default_color=None, device_type=None, fade=None, id=None, ip=None, name=None, position=None, reset_color=None, serial_number=None, space_id=None, space_name=None, version=None):
        """
        Lamp - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'available': 'bool',
            'bssid': 'str',
            'button_enabled': 'bool',
            'current_color': 'Color',
            'default_color': 'Color',
            'device_type': 'str',
            'fade': 'float',
            'id': 'int',
            'ip': 'str',
            'name': 'str',
            'position': 'Position',
            'reset_color': 'Color',
            'serial_number': 'str',
            'space_id': 'int',
            'space_name': 'str',
            'version': 'str'
        }

        self.attribute_map = {
            'available': 'available',
            'bssid': 'bssid',
            'button_enabled': 'button_enabled',
            'current_color': 'current_color',
            'default_color': 'default_color',
            'device_type': 'device_type',
            'fade': 'fade',
            'id': 'id',
            'ip': 'ip',
            'name': 'name',
            'position': 'position',
            'reset_color': 'reset_color',
            'serial_number': 'serial_number',
            'space_id': 'space_id',
            'space_name': 'space_name',
            'version': 'version'
        }

        self._available = available
        self._bssid = bssid
        self._button_enabled = button_enabled
        self._current_color = current_color
        self._default_color = default_color
        self._device_type = device_type
        self._fade = fade
        self._id = id
        self._ip = ip
        self._name = name
        self._position = position
        self._reset_color = reset_color
        self._serial_number = serial_number
        self._space_id = space_id
        self._space_name = space_name
        self._version = version

    @property
    def available(self):
        """
        Gets the available of this Lamp.

        :return: The available of this Lamp.
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """
        Sets the available of this Lamp.

        :param available: The available of this Lamp.
        :type: bool
        """

        self._available = available

    @property
    def bssid(self):
        """
        Gets the bssid of this Lamp.

        :return: The bssid of this Lamp.
        :rtype: str
        """
        return self._bssid

    @bssid.setter
    def bssid(self, bssid):
        """
        Sets the bssid of this Lamp.

        :param bssid: The bssid of this Lamp.
        :type: str
        """

        self._bssid = bssid

    @property
    def button_enabled(self):
        """
        Gets the button_enabled of this Lamp.

        :return: The button_enabled of this Lamp.
        :rtype: bool
        """
        return self._button_enabled

    @button_enabled.setter
    def button_enabled(self, button_enabled):
        """
        Sets the button_enabled of this Lamp.

        :param button_enabled: The button_enabled of this Lamp.
        :type: bool
        """

        self._button_enabled = button_enabled

    @property
    def current_color(self):
        """
        Gets the current_color of this Lamp.

        :return: The current_color of this Lamp.
        :rtype: Color
        """
        return self._current_color

    @current_color.setter
    def current_color(self, current_color):
        """
        Sets the current_color of this Lamp.

        :param current_color: The current_color of this Lamp.
        :type: Color
        """

        self._current_color = current_color

    @property
    def default_color(self):
        """
        Gets the default_color of this Lamp.

        :return: The default_color of this Lamp.
        :rtype: Color
        """
        return self._default_color

    @default_color.setter
    def default_color(self, default_color):
        """
        Sets the default_color of this Lamp.

        :param default_color: The default_color of this Lamp.
        :type: Color
        """

        self._default_color = default_color

    @property
    def device_type(self):
        """
        Gets the device_type of this Lamp.

        :return: The device_type of this Lamp.
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """
        Sets the device_type of this Lamp.

        :param device_type: The device_type of this Lamp.
        :type: str
        """

        self._device_type = device_type

    @property
    def fade(self):
        """
        Gets the fade of this Lamp.

        :return: The fade of this Lamp.
        :rtype: float
        """
        return self._fade

    @fade.setter
    def fade(self, fade):
        """
        Sets the fade of this Lamp.

        :param fade: The fade of this Lamp.
        :type: float
        """

        self._fade = fade

    @property
    def id(self):
        """
        Gets the id of this Lamp.

        :return: The id of this Lamp.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Lamp.

        :param id: The id of this Lamp.
        :type: int
        """

        self._id = id

    @property
    def ip(self):
        """
        Gets the ip of this Lamp.

        :return: The ip of this Lamp.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """
        Sets the ip of this Lamp.

        :param ip: The ip of this Lamp.
        :type: str
        """

        self._ip = ip

    @property
    def name(self):
        """
        Gets the name of this Lamp.

        :return: The name of this Lamp.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Lamp.

        :param name: The name of this Lamp.
        :type: str
        """

        self._name = name

    @property
    def position(self):
        """
        Gets the position of this Lamp.

        :return: The position of this Lamp.
        :rtype: Position
        """
        return self._position

    @position.setter
    def position(self, position):
        """
        Sets the position of this Lamp.

        :param position: The position of this Lamp.
        :type: Position
        """

        self._position = position

    @property
    def reset_color(self):
        """
        Gets the reset_color of this Lamp.

        :return: The reset_color of this Lamp.
        :rtype: Color
        """
        return self._reset_color

    @reset_color.setter
    def reset_color(self, reset_color):
        """
        Sets the reset_color of this Lamp.

        :param reset_color: The reset_color of this Lamp.
        :type: Color
        """

        self._reset_color = reset_color

    @property
    def serial_number(self):
        """
        Gets the serial_number of this Lamp.

        :return: The serial_number of this Lamp.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """
        Sets the serial_number of this Lamp.

        :param serial_number: The serial_number of this Lamp.
        :type: str
        """

        self._serial_number = serial_number

    @property
    def space_id(self):
        """
        Gets the space_id of this Lamp.

        :return: The space_id of this Lamp.
        :rtype: int
        """
        return self._space_id

    @space_id.setter
    def space_id(self, space_id):
        """
        Sets the space_id of this Lamp.

        :param space_id: The space_id of this Lamp.
        :type: int
        """

        self._space_id = space_id

    @property
    def space_name(self):
        """
        Gets the space_name of this Lamp.

        :return: The space_name of this Lamp.
        :rtype: str
        """
        return self._space_name

    @space_name.setter
    def space_name(self, space_name):
        """
        Sets the space_name of this Lamp.

        :param space_name: The space_name of this Lamp.
        :type: str
        """

        self._space_name = space_name

    @property
    def version(self):
        """
        Gets the version of this Lamp.

        :return: The version of this Lamp.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this Lamp.

        :param version: The version of this Lamp.
        :type: str
        """

        self._version = version

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Lamp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
