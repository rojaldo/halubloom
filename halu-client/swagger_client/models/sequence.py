# coding: utf-8

"""
    Halu API

    This should be a basic guide for the new Halu API. It will be updated as soon as I add new messages (or i'll try). The IP address to communicate with the master lamp is 10.0.0.1 by default.

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Sequence(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, command=None, id=None, name=None, cyclic=None, steps=None):
        """
        Sequence - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'command': 'str',
            'id': 'int',
            'name': 'str',
            'cyclic': 'bool',
            'steps': 'list[Step]'
        }

        self.attribute_map = {
            'command': 'Command',
            'id': 'id',
            'name': 'name',
            'cyclic': 'cyclic',
            'steps': 'steps'
        }

        self._command = command
        self._id = id
        self._name = name
        self._cyclic = cyclic
        self._steps = steps

    @property
    def command(self):
        """
        Gets the command of this Sequence.

        :return: The command of this Sequence.
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """
        Sets the command of this Sequence.

        :param command: The command of this Sequence.
        :type: str
        """

        self._command = command

    @property
    def id(self):
        """
        Gets the id of this Sequence.

        :return: The id of this Sequence.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Sequence.

        :param id: The id of this Sequence.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Sequence.

        :return: The name of this Sequence.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Sequence.

        :param name: The name of this Sequence.
        :type: str
        """

        self._name = name

    @property
    def cyclic(self):
        """
        Gets the cyclic of this Sequence.

        :return: The cyclic of this Sequence.
        :rtype: bool
        """
        return self._cyclic

    @cyclic.setter
    def cyclic(self, cyclic):
        """
        Sets the cyclic of this Sequence.

        :param cyclic: The cyclic of this Sequence.
        :type: bool
        """

        self._cyclic = cyclic

    @property
    def steps(self):
        """
        Gets the steps of this Sequence.

        :return: The steps of this Sequence.
        :rtype: list[Step]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """
        Sets the steps of this Sequence.

        :param steps: The steps of this Sequence.
        :type: list[Step]
        """

        self._steps = steps

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Sequence):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
