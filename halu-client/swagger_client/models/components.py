# coding: utf-8

"""
    Halu API

    This should be a basic guide for the new Halu API. It will be updated as soon as I add new messages (or i'll try). The IP address to communicate with the master lamp is 10.0.0.1 by default.

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Components(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, r=None, g=None, b=None, w=None):
        """
        Components - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'r': 'int',
            'g': 'int',
            'b': 'int',
            'w': 'int'
        }

        self.attribute_map = {
            'r': 'r',
            'g': 'g',
            'b': 'b',
            'w': 'w'
        }

        self._r = r
        self._g = g
        self._b = b
        self._w = w

    @property
    def r(self):
        """
        Gets the r of this Components.

        :return: The r of this Components.
        :rtype: int
        """
        return self._r

    @r.setter
    def r(self, r):
        """
        Sets the r of this Components.

        :param r: The r of this Components.
        :type: int
        """

        self._r = r

    @property
    def g(self):
        """
        Gets the g of this Components.

        :return: The g of this Components.
        :rtype: int
        """
        return self._g

    @g.setter
    def g(self, g):
        """
        Sets the g of this Components.

        :param g: The g of this Components.
        :type: int
        """

        self._g = g

    @property
    def b(self):
        """
        Gets the b of this Components.

        :return: The b of this Components.
        :rtype: int
        """
        return self._b

    @b.setter
    def b(self, b):
        """
        Sets the b of this Components.

        :param b: The b of this Components.
        :type: int
        """

        self._b = b

    @property
    def w(self):
        """
        Gets the w of this Components.

        :return: The w of this Components.
        :rtype: int
        """
        return self._w

    @w.setter
    def w(self, w):
        """
        Sets the w of this Components.

        :param w: The w of this Components.
        :type: int
        """

        self._w = w

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Components):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
