# coding: utf-8

"""
    Halu API

    This should be a basic guide for the new Halu API. It will be updated as soon as I add new messages (or i'll try). The IP address to communicate with the master lamp is 10.0.0.1 by default.

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Database(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, access_point_db=None, connection_db=None, ambiance_db=None, schedule_db=None, effect_db=None, has_internet=None, lamp_db=None, group_db=None, space_db=None, sequence_db=None, timestamp=None):
        """
        Database - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'access_point_db': 'AccessPoint',
            'connection_db': 'Connect',
            'ambiance_db': 'list[Ambiance]',
            'schedule_db': 'list[Scheduled]',
            'effect_db': 'list[Effect]',
            'has_internet': 'bool',
            'lamp_db': 'list[Lamp]',
            'group_db': 'list[Group]',
            'space_db': 'list[Space]',
            'sequence_db': 'list[Sequence]',
            'timestamp': 'int'
        }

        self.attribute_map = {
            'access_point_db': 'access_point_db',
            'connection_db': 'connection_db',
            'ambiance_db': 'ambiance_db',
            'schedule_db': 'schedule_db',
            'effect_db': 'effect_db',
            'has_internet': 'has_internet',
            'lamp_db': 'lamp_db',
            'group_db': 'group_db',
            'space_db': 'space_db',
            'sequence_db': 'sequence_db',
            'timestamp': 'timestamp'
        }

        self._access_point_db = access_point_db
        self._connection_db = connection_db
        self._ambiance_db = ambiance_db
        self._schedule_db = schedule_db
        self._effect_db = effect_db
        self._has_internet = has_internet
        self._lamp_db = lamp_db
        self._group_db = group_db
        self._space_db = space_db
        self._sequence_db = sequence_db
        self._timestamp = timestamp

    @property
    def access_point_db(self):
        """
        Gets the access_point_db of this Database.

        :return: The access_point_db of this Database.
        :rtype: AccessPoint
        """
        return self._access_point_db

    @access_point_db.setter
    def access_point_db(self, access_point_db):
        """
        Sets the access_point_db of this Database.

        :param access_point_db: The access_point_db of this Database.
        :type: AccessPoint
        """

        self._access_point_db = access_point_db

    @property
    def connection_db(self):
        """
        Gets the connection_db of this Database.

        :return: The connection_db of this Database.
        :rtype: Connect
        """
        return self._connection_db

    @connection_db.setter
    def connection_db(self, connection_db):
        """
        Sets the connection_db of this Database.

        :param connection_db: The connection_db of this Database.
        :type: Connect
        """

        self._connection_db = connection_db

    @property
    def ambiance_db(self):
        """
        Gets the ambiance_db of this Database.

        :return: The ambiance_db of this Database.
        :rtype: list[Ambiance]
        """
        return self._ambiance_db

    @ambiance_db.setter
    def ambiance_db(self, ambiance_db):
        """
        Sets the ambiance_db of this Database.

        :param ambiance_db: The ambiance_db of this Database.
        :type: list[Ambiance]
        """

        self._ambiance_db = ambiance_db

    @property
    def schedule_db(self):
        """
        Gets the schedule_db of this Database.

        :return: The schedule_db of this Database.
        :rtype: list[Scheduled]
        """
        return self._schedule_db

    @schedule_db.setter
    def schedule_db(self, schedule_db):
        """
        Sets the schedule_db of this Database.

        :param schedule_db: The schedule_db of this Database.
        :type: list[Scheduled]
        """

        self._schedule_db = schedule_db

    @property
    def effect_db(self):
        """
        Gets the effect_db of this Database.

        :return: The effect_db of this Database.
        :rtype: list[Effect]
        """
        return self._effect_db

    @effect_db.setter
    def effect_db(self, effect_db):
        """
        Sets the effect_db of this Database.

        :param effect_db: The effect_db of this Database.
        :type: list[Effect]
        """

        self._effect_db = effect_db

    @property
    def has_internet(self):
        """
        Gets the has_internet of this Database.

        :return: The has_internet of this Database.
        :rtype: bool
        """
        return self._has_internet

    @has_internet.setter
    def has_internet(self, has_internet):
        """
        Sets the has_internet of this Database.

        :param has_internet: The has_internet of this Database.
        :type: bool
        """

        self._has_internet = has_internet

    @property
    def lamp_db(self):
        """
        Gets the lamp_db of this Database.

        :return: The lamp_db of this Database.
        :rtype: list[Lamp]
        """
        return self._lamp_db

    @lamp_db.setter
    def lamp_db(self, lamp_db):
        """
        Sets the lamp_db of this Database.

        :param lamp_db: The lamp_db of this Database.
        :type: list[Lamp]
        """

        self._lamp_db = lamp_db

    @property
    def group_db(self):
        """
        Gets the group_db of this Database.

        :return: The group_db of this Database.
        :rtype: list[Group]
        """
        return self._group_db

    @group_db.setter
    def group_db(self, group_db):
        """
        Sets the group_db of this Database.

        :param group_db: The group_db of this Database.
        :type: list[Group]
        """

        self._group_db = group_db

    @property
    def space_db(self):
        """
        Gets the space_db of this Database.

        :return: The space_db of this Database.
        :rtype: list[Space]
        """
        return self._space_db

    @space_db.setter
    def space_db(self, space_db):
        """
        Sets the space_db of this Database.

        :param space_db: The space_db of this Database.
        :type: list[Space]
        """

        self._space_db = space_db

    @property
    def sequence_db(self):
        """
        Gets the sequence_db of this Database.

        :return: The sequence_db of this Database.
        :rtype: list[Sequence]
        """
        return self._sequence_db

    @sequence_db.setter
    def sequence_db(self, sequence_db):
        """
        Sets the sequence_db of this Database.

        :param sequence_db: The sequence_db of this Database.
        :type: list[Sequence]
        """

        self._sequence_db = sequence_db

    @property
    def timestamp(self):
        """
        Gets the timestamp of this Database.

        :return: The timestamp of this Database.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this Database.

        :param timestamp: The timestamp of this Database.
        :type: int
        """

        self._timestamp = timestamp

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Database):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
